/*

Given the head of a linked list, remove the nth node from the end of the list and return its head.

 

Example 1:


Input: head = [1,2,3,4,5], n = 2
Output: [1,2,3,5]
Example 2:

Input: head = [1], n = 1
Output: []
Example 3:

Input: head = [1,2], n = 1
Output: [1]
 

Constraints:

The number of nodes in the list is sz.
1 <= sz <= 30
0 <= Node.val <= 100
1 <= n <= sz
 

*/



// /**
//  * Definition for singly-linked list.
//  * struct ListNode {
//  *     int val;
//  *     ListNode *next;
//  *     ListNode() : val(0), next(nullptr) {}
//  *     ListNode(int x) : val(x), next(nullptr) {}
//  *     ListNode(int x, ListNode *next) : val(x), next(next) {}
//  * };
//  */
// class Solution {
// public:
//     ListNode* removeNthFromEnd(ListNode* head, int n) {
//         int len=0;
//         ListNode* curr=head;
//         while(curr!=NULL){
//             curr=curr->next;
//             len++;
//         }
//         ListNode* NewCurr=head;
//         int fromStart=len-n;
//         if(fromStart==0)return head->next;
//         for(int i=1;i<fromStart;i++){
//             NewCurr=NewCurr->next;
//         }
//         if(NewCurr->next==NULL)NewCurr=NULL;
//         else NewCurr->next=NewCurr->next->next;
//         return head;
//     }
// };


class Solution {
public:
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        ListNode* start=new ListNode();
        start->next=head;
        ListNode* slow=start,*fast=start;
    for(int i=0;i<n;i++){
        fast=fast->next;
    }
while(fast->next!=NULL){
    fast=fast->next;
    slow=slow->next;
}
slow->next=slow->next->next;
return start->next;
    }
};
