/*
Given a binary array nums and an integer k, return the maximum number of consecutive 1's in the array if you can flip at most k 0's.

 

Example 1:

Input: nums = [1,1,1,0,0,0,1,1,1,1,0], k = 2
Output: 6
Explanation: [1,1,1,0,0,1,1,1,1,1,1]
Bolded numbers were flipped from 0 to 1. The longest subarray is underlined.
Example 2:

Input: nums = [0,0,1,1,0,0,1,1,1,0,1,1,0,0,0,1,1,1,1], k = 3
Output: 10
Explanation: [0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1]
Bolded numbers were flipped from 0 to 1. The longest subarray is underlined.
 

Constraints:

1 <= nums.length <= 105
nums[i] is either 0 or 1.
0 <= k <= nums.length
*/


//brute force
// class Solution {
// public:
//     int longestOnes(vector<int>& nums, int k) {
//         int maxi=0;
//         for(int i=0;i<nums.size();i++){
// int cnt=0,remainings=k;
// for(int j=i;j<nums.size();j++){
// if(nums[j]==1)cnt++;
// else if(nums[j]==0){
//     if(remainings>0){remainings--;
//     cnt++;}
//     else if(remainings==0)break;
// }
// }
// maxi=max(maxi,cnt);
//         }
//         return maxi;
//     }
// };


//sliding window
class Solution {
public:
    int longestOnes(vector<int>& nums, int k) {
        int left = 0, right = 0, maxLen = 0, zeroCount = 0;

        while (right < nums.size()) {
            if (nums[right] == 0) {
                zeroCount++;
            }

            while (zeroCount > k) {
                if (nums[left] == 0) {
                    zeroCount--;
                }
                left++;
            }

            maxLen = max(maxLen, right - left + 1);
            right++;
        }

        return maxLen;
    }
};




