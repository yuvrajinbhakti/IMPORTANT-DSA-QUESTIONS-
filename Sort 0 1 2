//method 1 sort
// method 2 Since in this case there are only 3 distinct values in the array so itâ€™s easy to maintain the count of all, Like the count of 0, 1, and 2. This can be followed by overwriting the array based on the frequency(count) of the values.
void sortArray(vector<int>& arr, int n) {

    int cnt0 = 0, cnt1 = 0, cnt2 = 0;

    for (int i = 0; i < n; i++) {
        if (arr[i] == 0) cnt0++;
        else if (arr[i] == 1) cnt1++;
        else cnt2++;
    }

    //Replace the places in the original array:
    for (int i = 0; i < cnt0; i++) arr[i] = 0; // replacing 0's

    for (int i = cnt0; i < cnt0 + cnt1; i++) arr[i] = 1; // replacing 1's

    for (int i = cnt0 + cnt1; i < n; i++) arr[i] = 2; // replacing 2's

}


//method 3 Dutch National flag algorithm
class Solution {
public:
    void sortColors(vector<int>& nums) {
         int n=nums.size();
        int low=0,high=n-1,mid=0;
        while(mid<=high){
            if(nums[mid]==0){
swap(nums[low],nums[mid]);
low++;
mid++;
            }
            else if(nums[mid]==1){
mid++;
            }
            else if(nums[mid]==2){
swap(nums[high],nums[mid]);
high--;
            }
        }
    }
};
