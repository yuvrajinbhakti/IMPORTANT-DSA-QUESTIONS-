/*
Given the root of a binary search tree, and an integer k, return the kth smallest value (1-indexed) of all the values of the nodes in the tree.
Example 1:
Input: root = [3,1,4,null,2], k = 1
Output: 1
*/



/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    private:
    // int helper(int cnt, TreeNode* root, int k){
        // if(root==NULL) return cnt;
        // else {
        // if(cnt==k) return root->val;
        // cnt++;
        // }
    //     return helper(cnt,root->left,k)|| helper(cnt,root->right,k);
    // }
    void helper(int &cnt,int &ans,TreeNode* root,int k){
        if(root==NULL) return ; 
        helper(cnt,ans,root->left,k);

        if(cnt==k) ans= root->val;
        cnt++;
        
        helper(cnt,ans,root->right,k);
    }
public:
    int kthSmallest(TreeNode* root, int k) {
        //property of BST -> Inorder of BST gives us elements in sorted order
        int ans=0,cnt=1;
        helper(cnt,ans,root,k);
        return ans;
    }
};
