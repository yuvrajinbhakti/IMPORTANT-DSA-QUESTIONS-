/*
structure of linked list node:

struct Node
{
    int data;
    Node* next;
    
    Node(int val)
    {
        data = val;
        next = NULL;
    }
};

*/


class Solution
{
    public:
    //Function to remove a loop in the linked list.
    void removeLoop(Node* head)
    {
        // floyd cycle detection to know if the list has a loop
        if(head == NULL && head->next == NULL) return ;
        
        bool isLoop = false;
        Node* slow = head;
        Node* fast = head;
        
        while(fast != NULL && fast->next != NULL){
            slow = slow->next;
            fast = fast->next->next;
            
            if(slow == fast){
                isLoop = true;
                break;
            }
        }
        
        if(!isLoop) return ;
        
        // finding the start of the loop
        slow = head;
        while(fast != slow){
            slow = slow->next;
            fast = fast->next;
            
        }
        
        Node* startOfLoop = slow;
        
        // remove the loop
        while(slow->next != startOfLoop) slow = slow->next;
        slow->next = NULL;
        
        return ;
        
    }
};
