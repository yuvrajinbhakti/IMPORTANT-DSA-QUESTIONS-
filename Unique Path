/*
There is a robot on an m x n grid. The robot is initially located at the top-left corner (i.e., grid[0][0]). The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). The robot can only move either down or right at any point in time.

Given the two integers m and n, return the number of possible unique paths that the robot can take to reach the bottom-right corner.

The test cases are generated so that the answer will be less than or equal to 2 * 109.

 

Example 1:


Input: m = 3, n = 7
Output: 28
Example 2:

Input: m = 3, n = 2
Output: 3
Explanation: From the top-left corner, there are a total of 3 ways to reach the bottom-right corner:
1. Right -> Down -> Down
2. Down -> Down -> Right
3. Down -> Right -> Down
 

Constraints:

1 <= m, n <= 100
*/

//recursive code
// class Solution {
//     private:
//     int helper(int row,int col){
// if(row==0 && col==0)return 1;
// else if(row<0 || col<0) return 0;
// return helper(row-1,col)+helper(row,col-1);
//     }
// public:
//     int uniquePaths(int m, int n) {
//         return helper(m-1,n-1);
//     }
// };

//memoisation
// class Solution {
//     private:
//     int helper(int row,int col,vector<vector<int>> &dp){
// if(row==0 && col==0)return dp[row][col]=1;
// else if(row<0 || col<0) return 0;
// if(dp[row][col]!=-1)return dp[row][col];
// return dp[row][col]=helper(row-1,col,dp)+helper(row,col-1,dp);
//     }
// public:
//     int uniquePaths(int m, int n) {
//         vector<vector<int>> dp(m,vector<int> (n,-1));
//         return helper(m-1,n-1,dp);
//     }
// };

//tabulation
// class Solution {
//     private:
//     int helper(int row,int col){

// vector<vector<int>> dp(row+1,vector<int> (col+1,-1));
// if(row==0 && col==0)return 1;
// dp[0][0]=1;
// for(int i=1;i<=row;i++){
//     for(int j=1;j<=col;j++){
// dp[i][j]=dp[i-1][j]+dp[i][j-1];
//     }
// }
// return -dp[row][col];
//     }
// public:
//     int uniquePaths(int m, int n) {
        
//         return helper(m-1,n-1);
//     }
// };



//method 2
// class Solution {
//     private:
//     int helper(int row,int col){

// vector<vector<int>> dp(row+1,vector<int> (col+1,-1));

// for(int i=0;i<=row;i++){
//     for(int j=0;j<=col;j++){
//         if(i==0 && j==0)dp[i][j]=1;
//         else {
//             int up=0;
//             if(i>0)up=dp[i-1][j];
//             int left=0;
//             if(j>0)left=dp[i][j-1];
//             dp[i][j]=up+left;
//         }
//     }
// }
// return dp[row][col];
//     }
// public:
//     int uniquePaths(int m, int n) {
//         return helper(m-1,n-1);
//     }
// };




//space optimisation
class Solution{
public:
int uniquePaths(int m,int n){
vector<int> prev(n,0);
for(int i=0;i<m;i++){
    vector<int> curr(n,0);
    for(int j=0;j<n;j++){
        if(i==0 && j==0)curr[j]=1;
        else {
            int up=0,left=0;
            if(i>0)up=prev[j];
            if(j>0)left=curr[j-1];
            curr[j]=up+left;
        }
    }
    prev=curr;
}
return prev[n-1];
}
};












