/*
Given a binary tree, find if it is height balanced or not. 
A tree is height balanced if difference between heights of left and right subtrees is not more than one for all nodes of tree. 
*/





Method1 Brute Force -> Calculate height for each node's left and right and if difference between them is more then 1 then false.
class Solution{
    private:
    int height(Node* root){
        if(root==NULL) return 0;
        int left=height(root->left);
        int right=height(root->right);
        return 1+max(left,right);
    }
    bool helper(Node *root){
        if(root==NULL) return true;
        int l=height(root->left);
        int r=height(root->right);
        if(abs(l-r)>1) return false;
       
        return helper(root->right) && helper(root->left);
    }
    public:
    //Function to check whether a binary tree is balanced or not.
    bool isBalanced(Node *root)
    {
       return helper(root);
    }
};


T.C. -> O(N^2)







Method 2
//Function to check whether a binary tree is balanced or not.
class Solution{
public:
    //Function to check for balanced tree.
    bool isBalancedRec(Node *root, int* height)
    {
      int lh = 0, rh = 0;
      int l = 0, r = 0;

      //if root is null, we return true.
      if(root == NULL)
      {
        *height = 0;
         return 1;
      }
    
      //calling the function isBalancedRec recursively for the heights of left and right subtrees and storing the returned values in l and r.
      l = isBalancedRec(root->left, &lh);
      r = isBalancedRec(root->right,&rh);
    
      //height of current node is (max of heights of left and right subtrees) +1.
      *height = (lh > rh? lh: rh) + 1;
    
      //if difference between heights of left and right subtrees is 2 or more than 2 then this node is not balanced so we return false.
      if((lh - rh >= 2) || (rh - lh >= 2))
        return 0;
    
      //if this node is balanced and left and right subtrees are balanced then we return true.
      else 
      return l&&r;
    }
    
    bool isBalanced(Node *root)
    {
       int h = 0;
       return isBalancedRec(root, &h);
    }
};

Complexity:
Time Complexity:  O(n), where n is the number of nodes in the binary tree. This is because the code traverses each node in the tree exactly once.
Space Complexity: O(h), where h is the height of the binary tree. It is determined by the memory used by the call stack during the recursive traversal. In the worst case, the depth of the recursion (call stack depth) could be equal to the height of the binary tree.
