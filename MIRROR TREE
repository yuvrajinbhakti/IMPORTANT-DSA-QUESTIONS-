// QUESTION -> Given a Binary Tree, convert it into its mirror.

class Solution {
  public:
    // Function to convert a binary tree into its mirror tree.
   void mirror(Node* node) {
        if (node == NULL || (node->left == NULL && node->right == NULL))
            return;

        // Swap left and right subtrees
        swap(node->left, node->right);

        // Recursively mirror the left and right subtrees
        mirror(node->left);
        mirror(node->right);
    }
};









//APPROACH 2
/*
Intuition:
We can also use queue and Level Based approach for implementation for above problem. While traversing level order, we can swap left and right nodes.

Implementation:
-Do BFS. While doing BFS, keep swapping left and right children.
-while queue does not becomes empty.
1.pop top node from queue.
2.swap left child with right child.
3.append left and right children.
*/
void mirror(Node* root)
{
    if (root == NULL)
        return;
 
    queue<Node*> q;
    q.push(root);
 
    // Do BFS. While doing BFS, keep swapping
    // left and right children
    while (!q.empty()) {
        // pop top node from queue
        Node* curr = q.front();
        q.pop();
 
        // swap left child with right child
        swap(curr->left, curr->right);
 
        // push left and right children
        if (curr->left)
            q.push(curr->left);
        if (curr->right)
            q.push(curr->right);
    }
}
 
/* Helper function to print Inorder traversal.*/
void inOrder(struct Node* node)
{
    if (node == NULL)
        return;
    inOrder(node->left);
    cout << node->data << " ";
    inOrder(node->right);
}
 
