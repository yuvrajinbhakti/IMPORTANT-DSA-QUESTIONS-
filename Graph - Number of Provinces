/*
Given an undirected graph with V vertices. We say two vertices u and v belong to a single province if there is a path from u to v or v to u. Your task is to find the number of provinces.

Note: A province is a group of directly or indirectly connected cities and no other cities outside of the group.

Example 1:

Input:
[
 [1, 0, 1],
 [0, 1, 0],
 [1, 0, 1]
]

Output:
2
Explanation:
The graph clearly has 2 Provinces [1,3] and [2]. As city 1 and city 3 has a path between them they belong to a single province. City 2 has no path to city 1 or city 3 hence it belongs to another province.
Example 2:
Input:
[
 [1, 1],
 [1, 1]
]

Output :
1

Your Task:  
You don't need to read input or print anything. Your task is to complete the function numProvinces() which takes an integer V and an adjacency matrix adj(as a 2d vector) as input and returns the number of provinces. adj[i][j] = 1, if nodes i and j are connected and adj[i][j] = 0, if not connected.


Expected Time Complexity: O(V2)
Expected Auxiliary Space: O(V)
*/


class Solution {
    private:
    void bfs(vector<int> adjacency_list[],int start,int vis[]){
        queue<int> q;
       vis[start]=1;
        q.push(start);
        while(!q.empty()){
            int node=q.front();
            q.pop();
            for(auto it:adjacency_list[node]){
                if(!vis[it]){
                vis[it]=1;
                q.push(it);
                }
            }
        }
        
    }
    void dfs(vector<int> adjacency_list[],int start,int vis[]){
        vis[start]=1;
        for(auto it:adjacency_list[start]){
            if(!vis[it]){
                vis[it]=1;
                dfs(adjacency_list,it,vis);
            }
        }
    }
  public:
    int numProvinces(vector<vector<int>> adj, int V) {
        
//converting adjacency matrix to adjacency list
vector<int> adjacency_list[V];
for(int i=0;i<V;i++){
    for(int j=0;j<V;j++){
        if(adj[i][j]==1 && i!=j){
            adjacency_list[i].push_back(j);
            adjacency_list[j].push_back(i);
        }
    }
}

int cnt=0;
int vis[V]={0};
memset(vis,0,sizeof(vis));
for(int i=0;i<V ;i++){
  
        if(!vis[i]){
            cnt++;
            // bfs(adjacency_list,i,vis);
            dfs(adjacency_list,i,vis);
        }
    
}
return cnt;
    }
};
