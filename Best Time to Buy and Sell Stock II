/*
You are given an integer array prices where prices[i] is the price of a given stock on the ith day.

On each day, you may decide to buy and/or sell the stock. You can only hold at most one share of the stock at any time. However, you can buy it then immediately sell it on the same day.

Find and return the maximum profit you can achieve.

 

Example 1:

Input: prices = [7,1,5,3,6,4]
Output: 7
Explanation: Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4.
Then buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3.
Total profit is 4 + 3 = 7.
Example 2:

Input: prices = [1,2,3,4,5]
Output: 4
Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.
Total profit is 4.
Example 3:

Input: prices = [7,6,4,3,1]
Output: 0
Explanation: There is no way to make a positive profit, so we never buy the stock to achieve the maximum profit of 0.
 

Constraints:

1 <= prices.length <= 3 * 104
0 <= prices[i] <= 104
*/



//recursion
// class Solution {
//     private:
//     int helper(vector<int> prices,int ind,int buy){
// //base case 
// if(ind==prices.size())return 0;
// int profit=0;

// if(buy){
//     //buy or not buy
//     int take=-prices[ind]+helper(prices,ind+1,0);
//     int notTake=helper(prices,ind+1,1);
// profit=max(take,notTake);
// }
// else{
//     //sell or not sell
//     int sell=prices[ind]+helper(prices,ind+1,1);
//     int notSell=helper(prices,ind+1,0);
// profit=max(sell,notSell);
// }
// return profit;
//     }
// public:
//     int maxProfit(vector<int>& prices) {
//         return helper(prices,0,1);
//     }
// };


//memoization
// class Solution {
//     private:
//     int helper(vector<int> &prices,int ind,int buy,vector<vector<int>> &dp){
// //base case 
// if(ind==prices.size())return 0;
// int profit=0;
// if(dp[ind][buy]!=-1)return dp[ind][buy];
// if(buy){
//     //buy or not buy
//     int take=-prices[ind]+helper(prices,ind+1,0,dp);
//     int notTake=helper(prices,ind+1,1,dp);
// profit=max(take,notTake);
// }
// else{
//     //sell or not sell
//     int sell=prices[ind]+helper(prices,ind+1,1,dp);
//     int notSell=helper(prices,ind+1,0,dp);
// profit=max(sell,notSell);
// }
// return dp[ind][buy]=profit;
//     }
// public:
//     int maxProfit(vector<int>& prices) {
//         vector<vector<int>> dp(prices.size(),vector<int> (2,-1));
//         return helper(prices,0,1,dp);
//     }
// };





//tabulation 
// class Solution {
// public:
//     int maxProfit(vector<int>& prices) {
//         int n=prices.size();
//         vector<vector<int>> dp(n+1,vector<int> (2,-1));
//         //base case
//         dp[n][0]=0;
//         dp[n][1]=0;

//         for(int ind=n-1;ind>=0;ind--){
//             for(int buy=0;buy<=1;buy++){      //for telling whether to buy or not we need only 2 values 
// int profit=0;
// if(buy){
//     //buy or not buy
//     int take=-prices[ind]+dp[ind+1][0];
//     int notTake=dp[ind+1][1];
// profit=max(take,notTake);
// }
// else{
//     //sell or not sell
//     int sell=prices[ind]+dp[ind+1][1];
//     int notSell=dp[ind+1][0];
// profit=max(sell,notSell);
// }
// dp[ind][buy]=profit;
//             }
//         }
//         return dp[0][1];
//     }
// };




//space optimisation 
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int n=prices.size();
        vector<int> ahead(2,0),curr(2,0);
        //base case
        ahead[0]=0;
        ahead[1]=0;

        for(int ind=n-1;ind>=0;ind--){
            for(int buy=0;buy<=1;buy++){      //for telling whether to buy or not we need only 2 values 
int profit=0;
if(buy){
    //buy or not buy
    int take=-prices[ind]+ahead[0];
    int notTake=ahead[1];
profit=max(take,notTake);
}
else{
    //sell or not sell
    int sell=prices[ind]+ahead[1];
    int notSell=ahead[0];
profit=max(sell,notSell);
}
curr[buy]=profit;
            }
            ahead=curr;
        }
        return ahead[1];
    }
};
