/*
You are given an array prices where prices[i] is the price of a given stock on the ith day.

Find the maximum profit you can achieve. You may complete at most two transactions.

Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).

 

Example 1:

Input: prices = [3,3,5,0,0,3,1,4]
Output: 6
Explanation: Buy on day 4 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.
Then buy on day 7 (price = 1) and sell on day 8 (price = 4), profit = 4-1 = 3.
Example 2:

Input: prices = [1,2,3,4,5]
Output: 4
Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.
Note that you cannot buy on day 1, buy on day 2 and sell them later, as you are engaging multiple transactions at the same time. You must sell before buying again.
Example 3:

Input: prices = [7,6,4,3,1]
Output: 0
Explanation: In this case, no transaction is done, i.e. max profit = 0.
 

Constraints:

1 <= prices.length <= 105
0 <= prices[i] <= 105

*/


/*
//recursion
class Solution {
    private:
    int helper(vector<int> &prices,int ind,int buy,int cap){
if(cap==0)return 0;
if(ind==prices.size())return 0;
int profit=0;
if(buy){
    int Buy=-prices[ind]+helper(prices,ind+1,0,cap);
    int NotBuy=0+helper(prices,ind+1,1,cap);
profit=max(Buy,NotBuy);
}
else {
int sell=prices[ind]+helper(prices,ind+1,1,cap-1);
int notSell=0+helper(prices,ind+1,0,cap);
profit=max(sell,notSell);
}
return profit;
    }
public:
    int maxProfit(vector<int>& prices) {
     return helper(prices,0,1,2);   
    }
};
*/


/*
//memoization
class Solution {
    private:
    int helper(vector<int> &prices,int ind,int buy,int cap,vector<vector<vector<int>>> &dp){
if(cap==0)return 0;
if(ind==prices.size())return 0;
if(dp[ind][buy][cap]!=-1)return dp[ind][buy][cap];
int profit=0;
if(buy){
    int Buy=-prices[ind]+helper(prices,ind+1,0,cap,dp);
    int NotBuy=0+helper(prices,ind+1,1,cap,dp);
profit=max(Buy,NotBuy);
}
else {
int sell=prices[ind]+helper(prices,ind+1,1,cap-1,dp);
int notSell=0+helper(prices,ind+1,0,cap,dp);
profit=max(sell,notSell);
}
return dp[ind][buy][cap]= profit;
    }
public:
    int maxProfit(vector<int>& prices) {
        //3d dp
vector<vector<vector<int>>> dp(prices.size(),vector<vector<int>> (2,vector<int> (3,-1)));
     return helper(prices,0,1,2,dp);   
    }
};


*/




//tabulation
// class Solution {
// public:
//     int maxProfit(vector<int>& prices) {
//     vector<vector<vector<int>>> dp(prices.size()+1, vector<vector<int>> (2,vector<int> (3,-1)));
// //base case
// //cap==0
// for(int ind=0;ind<=prices.size();ind++){
//     for(int buy=0;buy<=1;buy++){
//         dp[ind][buy][0]=0;
//     }
// }
// //ind==prices.size()
// for(int buy=0;buy<=1;buy++){
//     for(int cap=0;cap<=2;cap++){
//         dp[prices.size()][buy][cap]=0;
//     }
// }


// for(int ind=prices.size()-1;ind>=0;ind--){
//     for(int buy=0;buy<=1;buy++){
//         for(int cap=1;cap<=2;cap++){
//                         int profit=0;
//                         if(buy){
//                             int Buy=-prices[ind]+dp[ind+1][0][cap];
//                             int NotBuy=0+dp[ind+1][1][cap];
//                         profit=max(Buy,NotBuy);
//                         }
//                         else {
//                         int sell=prices[ind]+dp[ind+1][1][cap-1];
//                         int notSell=0+dp[ind+1][0][cap];
//                         profit=max(sell,notSell);
//                         }
//                         dp[ind][buy][cap]= profit;
//         }
//     }
// }
//      return dp[0][1][2];   
//     }
// };




//space optimization
class Solution {
public:
    int maxProfit(vector<int>& prices) {
    // vector<vector<vector<int>>> dp(prices.size()+1, vector<vector<int>> (2,vector<int> (3,-1)));
vector<vector<int>> after(2,vector<int> (3,0)),curr(2,vector<int> (3,0));

//base case
//cap==0
for(int ind=0;ind<=prices.size();ind++){
    for(int buy=0;buy<=1;buy++){
        curr[buy][0]=0;
    }
}
//ind==prices.size()
for(int buy=0;buy<=1;buy++){
    for(int cap=0;cap<=2;cap++){
        curr[buy][cap]=0;
    }
}


for(int ind=prices.size()-1;ind>=0;ind--){
    for(int buy=0;buy<=1;buy++){
        for(int cap=1;cap<=2;cap++){
                        int profit=0;
                        if(buy){
                            int Buy=-prices[ind]+after[0][cap];
                            int NotBuy=0+after[1][cap];
                        profit=max(Buy,NotBuy);
                        }
                        else {
                        int sell=prices[ind]+after[1][cap-1];
                        int notSell=0+after[0][cap];
                        profit=max(sell,notSell);
                        }
                        curr[buy][cap]= profit;
        }
        after=curr;
    }
}
     return after[1][2];   
    }
};
