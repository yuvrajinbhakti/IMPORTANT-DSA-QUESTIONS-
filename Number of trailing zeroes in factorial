Given an integer n, write a function that returns count of trailing zeroes in n!. 
Input: n = 5
Output: 1
Explanation: Factorial of 5 is 120 which has one trailing 0.

Input: n = 20
Output: 4
Explanation: Factorial of 20 is 2432902008176640000 which has 4 trailing zeroes.

Input: n = 100
Output: 24

Solution:
Count trailing zeroes by counting occurrence of 5 in the factorial:
A simple method is to first calculate factorial of n, then count trailing 0s in the result but this can cause overflow for bigger numbers. The idea is to consider prime factors of a factorial n. A trailing zero is always produced by prime factors 2 and 5. If we can count the number of 5s and 2s, our task is done.
Input: n = 5: There is one 5 and three 2s in prime factors of 5! (2 * 2 * 2 * 3 * 5). So a count of trailing 0s is 1.
Input: n = 11: There are two 5s and eight 2s in prime factors of 11! (2 8 * 34 * 52 * 7). So the count of trailing 0s is 2.

Trailing 0s in n! = Count of 5s in prime factors of n! = floor(n/5) + floor(n/25) + floor(n/125) + â€¦.
Time Complexity: O(log5n)
Auxiliary Space: O(1)


int findTrailingZeros(int n)
{
    if (n < 0)	return -1; // Negative Number Edge Case
    int count = 0;	// Initialize result
    // Keep dividing n by powers of 5 and update count
    for (int i = 5; n / i >= 1; i *= 5)count += n / i;
    return count;
}
