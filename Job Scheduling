/*
Given a set of N jobs where each jobi has a deadline and profit associated with it.

Each job takes 1 unit of time to complete and only one job can be scheduled at a time. We earn the profit associated with job if and only if the job is completed by its deadline.

Find the number of jobs done and the maximum profit.

Note: Jobs will be given in the form (Jobid, Deadline, Profit) associated with that Job. Deadline of the job is the time before which job needs to be completed to earn the profit.

Example 1:

Input:
N = 4
Jobs = {(1,4,20),(2,1,10),(3,1,40),(4,1,30)}
Output:
2 60
Explanation:
Job1 and Job3 can be done with
maximum profit of 60 (20+40).
Example 2:

Input:
N = 5
Jobs = {(1,2,100),(2,1,19),(3,2,27),
        (4,1,25),(5,1,15)}
Output:
2 127
Explanation:
2 jobs can be done with
maximum profit of 127 (100+27).

Your Task :
You don't need to read input or print anything. Your task is to complete the function JobScheduling() which takes an integer N and an array of Jobs(Job id, Deadline, Profit) as input and returns the count of jobs and maximum profit as a list or vector of 2 elements.


Expected Time Complexity: O(NlogN)
Expected Auxilliary Space: O(N)

*/


//to get max profit take the jobs first who have max profit

// so S1. sort in decreasing order of profit.
// we always try to perform a job on it's last day of deadline (if not on last day then as late as possible i.e. as close to deadline as possible) so we can do more / other jobs on remaining days


//Intution - Sort according to profit in decreasing order and then try to do job with larger deadline as late as possible so we can perform jobs with shorter deadlines first, so we can maximise number of jobs and profits

//T.C. - O(N Log N) + O(N*M)  ,(N Log N for sorting and N*M because we itterate over all the job id's and for each job id's we check from last deadline to first deadline which day is empty so we can do job in that day, here M is max deadline)

// S.C. - O(M), (M is max deadline we can have for any job) (because we keep array to know on which day which job is performed)

// (we can also use disjoint set to remove the check from last to first day,but in interview the interviewer is looking for above solution)



#include <bits/stdc++.h>
using namespace std;

// Prints minimum number of platforms reqquired
// This function is used for sorting all jobs according to profit
bool comparison(Job a, Job b){

return (a.profit > b.profit);
}

pair<int, int> JobScheduling(Job arr[], int n){

sort(arr, arr + n, comparison);     //sort according to decreasing order of profit
int maxi = arr[0].dead;

for(int i = 1;i<n;i++) {        //find max deadline
// maxi = max(maxi, arr[i].dead);
if(maxi<arr[i].dead) maxi=arr[i].dead;
}

int slot[maxi + 1];     // so we can assign jobs performed on any given day

for (int i=0; i< maxi; i++) slot[i] =-1;        //because initially no jobs are performed

int countJobs = 0, jobProfit = 0;

for (int i=0; i<n; i++){
for (int j=arr[i].dead; j>0; j -- ){    // because for any job id we have to perform it as late as possible

if (slot[j] == -1){     // whichever day is empty perform job on that day
slot[j] = i;
countJobs++;
jobProfit+-arr[i].profit;
break;
}
}
}

return make_pair(countJobs, jobProfit);
}

