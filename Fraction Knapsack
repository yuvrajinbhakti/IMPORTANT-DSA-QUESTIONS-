/* Fraction Knapsack
Given weights and values of N items, we need to put these items in a knapsack of capacity W to get the maximum total value in the knapsack.
Note: Unlike 0/1 knapsack, you are allowed to break the item here. 

Example 1:

Input:
N = 3, W = 50
value[] = {60,100,120}
weight[] = {10,20,30}
Output:
240.00
Explanation:
Take the item with value 60 and weight 10, value 100 and weight 20 and split the third item with value 120 and weight 30, to fit it into weight 20. so it becomes (120/30)*20=80, so the total weight becomes 60+100+80.0=240.0
Thus, total maximum value of item we can have is 240.00 from the given capacity of sack. 

Input:
N = 2, W = 50
value[] = {60,100}
weight[] = {10,20}
Output:
160.00
Explanation:
Take both the items completely, without breaking.
Total maximum value of item we can have is 160.00 from the given capacity of sack.

Your Task :
Complete the function fractionalKnapsack() that receives maximum capacity , array of structure/class and size N and returns a double value representing the maximum value in knapsack.
Note: The details of structure/class is defined in the comments above the given function.

Expected Time Complexity : O(NlogN)
Expected Auxilliary Space: O(1)

*/


// when told to  maximise the value then  think of greedy
// here greedy will think take whose value/weight ratio is maximum

//So S1 Sort the items with respect to value per weight in descending order

// take entire wt if wt<knapsack wt else(i.e. when wt>=knapsack_wt) pick some portion of wt and stop as now knapsack is full


//T.C. - O(N Log N)  + O(N)   //N Log N for sorting and N for itteration 
//S.C. - O(1)


#include<bits/stdc++.h>
using namespace std;

//class implemented
struct item{
    int value;
    int weight;
};


bool comparator(item a ,item b){
    double r1=(double)a.value/ (double)a.weight;
    double r2=(double)b.value/(double)b.weight;
    return r1>r2;
}

double fractionalKnapsack(int W,item arr[],int n){          //W is weight of knapsack, arr is array which will have array and weight, n is number of items
sort(arr,arr+n,comparator); // for sorting according to value/weight in descending order i.e. max value/wt is at first
int currWeight=0;
double finalvalue=0;
for(int i=0;i<n;i++){
    if(currWeight+arr[i].weight<=W){ // if fits in knapsack so we can take complete item
        currWeight+=arr[i].weight;
        finalvalue+=arr[i].value;
    }
    else{   // if not completely fitting in knapsack, so take remaining amt of item
        int remain=W-currWeight;
        finalvalue+=(arr[i].value/(double)arr[i].weight) *(double)remain;
        break;
    }
}
return finalvalue;
}

