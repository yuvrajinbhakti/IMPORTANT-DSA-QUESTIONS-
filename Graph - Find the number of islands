/*
Given a grid of size n*m (n is the number of rows and m is the number of columns in the grid) consisting of '0's (Water) and '1's(Land). Find the number of islands.

Note: An island is either surrounded by water or boundary of grid and is formed by connecting adjacent lands horizontally or vertically or diagonally i.e., in all 8 directions.

Example 1:

Input:
grid = {{0,1},{1,0},{1,1},{1,0}}
Output:
1
Explanation:
The grid is-
0 1
1 0
1 1
1 0
All lands are connected.
Example 2:

Input:
grid = {{0,1,1,1,0,0,0},{0,0,1,1,0,1,0}}
Output:
2
Expanation:
The grid is-
0 1 1 1 0 0 0
0 0 1 1 0 1 0 
There are two islands :- one is colored in blue 
and other in orange.


//find number of connected components
*/

class Solution {
  private:
  void bfs(vector<vector<char>>& grid, vector<vector<int>> &vis,int i,int j){
      vis[i][j]=1;
      queue<pair<int,int>> q;
      q.push({i,j});
      int n=grid.size();
      int m=grid[0].size();
      while(!q.empty()){
         int row=q.front().first;
         int col=q.front().second;
         q.pop();
         
         //traverse for neighbours
        for(int delrow=-1;delrow<=1;delrow++){
            for(int delcol=-1;delcol<=1;delcol++){
                int newRow=row+delrow;
                int newCol=col+delcol;
                
                if(newRow>=0 && newRow<n && newCol>=0 && newCol<m  && grid[newRow][newCol]== '1' && !vis[newRow][newCol]){
                    vis[newRow][newCol]=1;
                    q.push({newRow,newCol});
                }
            }
        }
          
      }
  }
  public:
    // Function to find the number of islands.
    int numIslands(vector<vector<char>>& grid) {
        int n=grid.size();
        int m=grid[0].size();
        vector<vector<int>> vis(n,vector<int> (m,0));
        int cnt=0;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(!vis[i][j] && grid[i][j]=='1'){ 
                cnt++;
                bfs(grid,vis,i,j);
                }
            }
        }
        return cnt;
    }
};
