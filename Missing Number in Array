Given an array of size N-1 such that it only contains distinct integers in the range of 1 to N. Find the missing element.

Solution:
  int missingNumber(vector<int>& arr, int n) {
      //method 1 check for each number whether that number is in array or not 
      //METHOD 2 sort and then return index+1 if a[i]!=i+1
//method3 use hashing
void findMissing(int arr[], int N)
{
    int i;
    int temp[N + 1];
    for(int i = 0; i <= N; i++){
      temp[i] = 0;
    }  
    for(i = 0; i < N; i++){
      temp[arr[i] - 1] = 1;
    }
int ans;
    for (i = 0; i <= N ; i++) {
        if (temp[i] == 0) ans = i  + 1;
    }
    cout << ans;
}

//method 4 use maths i.e.. do sum of all elements in arrays and sum of 1st n numbers then subtract them to get answer
      int sum=0;
      for(int i=0;i<n-1;i++)sum+=arr[i];
      int realsum=(n*(n+1))/2;
      int ans=abs(realsum-sum);
      return ans; 
    }

But if N is large then it might result in overflow so to avoid overflow, pick one number from the range [1, N] and subtract a number from the given array (don’t subtract the same number twice). This way there won’t be any integer overflow.
int getMissingNo(int a[], int n)
{
    int i, total = 1; // total stores total sum of first n elements
    for (i = 2; i < (n + 1); i++) {
        total += i;
        total -= a[i - 2];
    }
    return total;
}


