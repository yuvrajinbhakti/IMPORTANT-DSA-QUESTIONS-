/*
Given an array nums of distinct integers, return all the possible permutations. You can return the answer in any order.
Example 1:

Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]
Example 2:

Input: nums = [0,1]
Output: [[0,1],[1,0]]
Example 3:

Input: nums = [1]
Output: [[1]]
 

Constraints:

1 <= nums.length <= 6
-10 <= nums[i] <= 10
All the integers of nums are unique.
*/
class Solution {
    void helper(vector<vector<int>> &ans,vector<int> &nums,int pos){
        //base case
        if(pos==nums.size()){
            ans.push_back(nums);
        }
        //ek ke liye krke dikhaao
for(int i=pos;i<nums.size();i++){
    swap(nums[i],nums[pos]);
    helper(ans,nums,pos+1);//recursion aage ka dedo pls
    swap(nums[i],nums[pos]);//changing back to original before going to original
}
    }
public:
    vector<vector<int>> permute(vector<int>& nums) {
        vector<vector<int>> ans;
helper(ans,nums,0);
return ans;
    }
};
